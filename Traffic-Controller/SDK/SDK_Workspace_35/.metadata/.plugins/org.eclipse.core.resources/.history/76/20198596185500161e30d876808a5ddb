#include <stdio.h>
#include "xgpio_l.h"
#include <xtmrctr.h>
#include <xintc_l.h>
#include <xgpio.h>
#include <xparameters.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xutil.h"
#define LEDChan  1

#define LCD_BASEADDR XPAR_LCD_IP_0_BASEADDR
#define INIT_DELAY 1000 //usec delay timer during initialization, important to change if clock speed changes
#define INST_DELAY 500 //usec delay timer between instructions
#define DATA_DELAY 250 //usec delay timer between data

/* Global variables: count is the count displayed using the 
 * LEDs, and timer_count is the interrupt frequency.
 */
unsigned int timer_count = 1;
unsigned int count = 1;

// Controls our lights
unsigned int lightControl = 2;

int one_second_flag = 1;

XGpio gpio;

void timer_int_handler(void * baseaddr_p) {
	/* Add variable declarations here */

	unsigned int csr;
	/* Read timer 0 CSR to see if it raised the interrupt */

	csr = XTmrCtr_GetControlStatusReg(XPAR_DELAY_BASEADDR, 0);
	/* If the interrupt occured, then increment a counter and set one_second_flag */

	if(csr && XTC_CSR_INT_OCCURED_MASK){
		count++;
		one_second_flag = 1;
	}
	/* Display the count on the LEDS and print it using the UART */
	/**
	 * Change our LEDS here!!!!!!
	 */
	//XGpio_DiscreteWrite(&gpio, LEDChan, 1);
	//xil_printf("Count Value is: %x\r\n", count);
	/* Clear the timer interrupt */

	XTmrCtr_SetControlStatusReg(XPAR_DELAY_BASEADDR, 0, csr);

}

void usleep(unsigned int delay)
{
unsigned int j, i;

for(i=0; i<delay; i++)
   for(j=0; j<26; j++);
}

void XromInitInst(void)
{
		XGpio_WriteReg(LCD_BASEADDR, 1, 0x00000003);
		usleep(1);
		XGpio_WriteReg(LCD_BASEADDR, 1, 0x00000043); //set enable and data
		usleep(1);
		XGpio_WriteReg(LCD_BASEADDR, 1, 0x00000003);
		usleep(INIT_DELAY);
}

void XromWriteInst(unsigned long inst1, unsigned long inst2)
{

	unsigned long printinst;

	printinst = 0x00000040 | inst1;

	XGpio_WriteReg(LCD_BASEADDR, 1, inst1); //write data
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, printinst); //set enable
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, inst1); //turn off enable
	usleep(1);

	printinst = 0x00000040 | inst2;

	XGpio_WriteReg(LCD_BASEADDR, 1, printinst); //set enable and data
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, inst2); //turn off enable

	usleep(INST_DELAY);

}

void XromWriteData(unsigned long data1, unsigned long data2)
{

	unsigned long rs_data, enable_rs_data;
	//bool busy=true;

	rs_data = (0x00000020 | data1); //sets rs, data1
	enable_rs_data = (0x00000060 | data1);

	XGpio_WriteReg(LCD_BASEADDR, 1, rs_data); //write data, rs
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, enable_rs_data); //set enable, keep data, rs
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, rs_data); //turn off enable
	usleep(1);

	rs_data = (0x00000020 | data2); //sets rs, data2
	enable_rs_data = (0x00000060 | data2); //sets rs, data2

	XGpio_WriteReg(LCD_BASEADDR, 1, enable_rs_data); //set enable, rs, data
	usleep(1);
	XGpio_WriteReg(LCD_BASEADDR, 1, rs_data); //turn off enable

	usleep(DATA_DELAY);
}

void XromMoveCursorHome(){
	XromWriteInst(0x00000000, 0x00000002);
}

void XromMoveCursorLeft(){
	XromWriteInst(0x00000001, 0x00000000);
}

void XromMoveCursorRight(){
	XromWriteInst(0x00000001, 0x00000004);
}

void XromLCDOn(){
	//xil_printf("DISPLAY ON\r\n");
		XromWriteInst(0x00000000, 0x0000000E);
}

void XromLCDOff(){
	//xil_printf("DISPLAY OFF\r\n");
		XromWriteInst(0x00000000, 0x00000008);
}

void XromLCDClear(){
	//xil_printf("DISPLAY CLEAR\r\n");
		XromWriteInst(0x00000000, 0x00000001);
		XromWriteInst(0x00000000, 0x00000010);
		XromMoveCursorHome();
}

void XromLCDInit(){
	//XGpio_SetDataDirection(LCD_BASEADDR, 1, 0x00000000); //Sets CHAR LCD Reg to Write Mode
	XGpio_WriteReg(LCD_BASEADDR, 1, 0x00000000); //Zeroes CHAR LCD Reg

	//LCD INIT
	usleep(15000);	//After VCC>4.5V Wait 15ms to Init Char LCD
		XromInitInst();
	usleep(4100); //Wait 4.1ms
		XromInitInst();
	usleep(100); //Wait 100us
		XromInitInst();
		XromInitInst();

	//Function Set
		XromWriteInst(0x00000002, 0x00000008);

	//Entry Mode Set
		XromWriteInst(0x00000000, 0x00000006);

	//Display Off
		XromWriteInst(0x00000000, 0x00000008);

	//Display On
		XromWriteInst(0x00000000, 0x0000000F);

	//Display Clear
		XromWriteInst(0x00000000, 0x00000001);
}

void XromLCDSetLine(int line){ //line1 = 1, line2 = 2

	int i;

	if((line - 1)) {
		XromMoveCursorHome();
		for(i=0; i<40; i++)
			XromMoveCursorRight();
	}
	else
		XromMoveCursorHome();

}

void XromLCDPrintChar(char c){
	XromWriteData(((c >> 4) & 0x0000000F), (c & 0x0000000F));
}

void XromLCDPrintString(char * line){

	int i=0;
		while(line[i]){
			XromLCDPrintChar(line[i]);
			i++;
		}

	return;
}

void XromLCDPrint2Strings(char * line1, char * line2){

	int i=0;

		XromLCDSetLine(1);

		for(i=0; i<16; i++){
			if(line1[i])
				XromLCDPrintChar(line1[i]);
			else break;
		}

		XromLCDSetLine(2);

		for(i=0; i<16; i++){
			if(line2[i])
				XromLCDPrintChar(line2[i]);
			else break;
		}
	return;
}

void XromLCDPrintNum(unsigned int x, unsigned int base)
{
  static char hex[]="0123456789ABCDEF";
  char digit[10];
  int i;

  i = 0;
  do
  {
    digit[i] = hex[x % base];
    x = x / base;
    i++;
  } while (x != 0);

  while (i > 0)
  {
  	i--;
    XromLCDPrintChar(digit[i]);
  }
}

void XromLCDPrintInt(unsigned int x)
{
  unsigned int val;

  if (x < 0)
  {
    XromLCDPrintChar('-');
    val = ((unsigned int) ~x ) + 1;
  }
  else
    val = (unsigned int) x;

  XromLCDPrintNum(val, 10);
}


int main() {

  int trafficController;
  int trafficLight = 0;
  int yellowLight = 0;
  XGpio dip, push;
  int i, push_current;
  
  // Enable MicroBlaze Interrupts
  // microblaze_enable_interrupts();
  
  XGpio_Initialize(&dip, XPAR_DIP_DEVICE_ID);
  XGpio_SetDataDirection(&dip, 1, 0xffffffff);

  XGpio_Initialize(&push, XPAR_PUSH_DEVICE_ID);
  XGpio_SetDataDirection(&push, 1, 0xffffffff);

  /* Register the Timer interrupt handler in the vector table */
  XIntc_RegisterHandler(XPAR_XPS_INTC_0_BASEADDR,
                             XPAR_XPS_INTC_0_DELAY_INTERRUPT_INTR,
                             (XInterruptHandler) timer_int_handler,
                             (void *)XPAR_DELAY_BASEADDR);

  /* Initialize and set the direction of the GPIO connected to LEDs */
  XGpio_Initialize(&gpio, XPAR_LEDS_8BIT_DEVICE_ID);
  XGpio_SetDataDirection(&gpio,LEDChan, 0);

  /* Start the interrupt controller */
  XIntc_MasterEnable(XPAR_XPS_INTC_0_BASEADDR);
  XIntc_EnableIntr(XPAR_XPS_INTC_0_BASEADDR, 0x1);

  /* Set the gpio as output on high 8 bits (LEDs)*/
  XGpio_WriteReg(XPAR_LEDS_8BIT_DEVICE_ID,LEDChan, count);
  xil_printf("The value of count = %d\n\r", count);

  /* Set the number of cycles the timer counts before interrupting */
  XTmrCtr_SetLoadReg(XPAR_DELAY_BASEADDR, 0, (timer_count*timer_count+1) * 80000000); 
   
  /* Reset the timers, and clear interrupts */
  XTmrCtr_SetControlStatusReg(XPAR_DELAY_BASEADDR, 0, XTC_CSR_INT_OCCURED_MASK | XTC_CSR_LOAD_MASK );
	
  /* Enable timer interrupts in the interrupt controller */
  XIntc_EnableIntr(XPAR_DELAY_BASEADDR, XPAR_DELAY_INTERRUPT_MASK);
  
  /* Start the timers */
  XTmrCtr_SetControlStatusReg(XPAR_DELAY_BASEADDR, 0, XTC_CSR_ENABLE_TMR_MASK | XTC_CSR_ENABLE_INT_MASK | 
						XTC_CSR_AUTO_RELOAD_MASK | XTC_CSR_DOWN_COUNT_MASK);  
  /* Enable MB interrupts */
  microblaze_enable_interrupts();

  XromLCDInit();
  XromLCDOn();

  xil_printf("Daniel Patino 4902044");
  xil_printf("Danny Suarez 3456880");
  xil_printf("Diego Mujica 3639353");

  /* Wait for interrupts to occur */
  while(1) {
	if(one_second_flag){
		push_current = XGpio_DiscreteRead(&push, 1);

		trafficController = count % 16;
		if (trafficController == 0){
			XGpio_DiscreteWrite(&gpio, LEDChan, 0);

		    XromLCDClear();
			XromLCDSetLine(1);
		    XromLCDPrintString("Switch light.");

			trafficLight++;
			trafficLight = trafficLight % 2;
		}
		else if (trafficController <= 11 && trafficController > 0){
			if(push_current != 0) {
				count = 10;
				XromLCDClear();
				XromLCDSetLine(1);
				XromLCDPrintString("Button pushed.");
			}

			if (trafficLight == 0){
			    XromLCDClear();
				XromLCDSetLine(1);
			    XromLCDPrintString("L1 is green.");
			    XromLCDSetLine(2);
			    XromLCDPrintString("L2 is red.");

				XGpio_DiscreteWrite(&gpio, LEDChan, 1);
			}
			else {
			    XromLCDClear();
				XromLCDSetLine(1);
			    XromLCDPrintString("L1 is red.");
			    XromLCDSetLine(2);
			    XromLCDPrintString("L2 is green.");

				XGpio_DiscreteWrite(&gpio, LEDChan, 2);
			}
		}
		else if (trafficController <= 15 && trafficController > 11){

			if (trafficLight == 0){
			    XromLCDClear();
				XromLCDSetLine(1);
			    XromLCDPrintString("L1 is yellow.");
			    XromLCDSetLine(2);
			    XromLCDPrintString("L2 is red.");

				if (yellowLight % 2 == 0)
					XGpio_DiscreteWrite(&gpio, LEDChan, 0);
				else
					XGpio_DiscreteWrite(&gpio, LEDChan, 1);
				yellowLight++;
			}
			else {
			    XromLCDClear();
				XromLCDSetLine(1);
			    XromLCDPrintString("L1 is red.");
			    XromLCDSetLine(2);
			    XromLCDPrintString("L2 is yellow.");

				if (yellowLight % 2 == 0)
					XGpio_DiscreteWrite(&gpio, LEDChan, 0);
				else
					XGpio_DiscreteWrite(&gpio, LEDChan, 2);
				yellowLight++;
			}
		}
		else
			xil_printf("I should not show up. \n\r");

		one_second_flag=0;
		xil_printf(".");
		}
	}
}
